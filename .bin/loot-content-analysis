#!/usr/bin/env node --harmony_destructuring

const yaml = require('js-yaml')
const fs = require('fs')
const path = require('path')

const argv = require('minimist')(process.argv.slice(2))

const fetchPages = require('../lib/fetch-pages')
const fetchStats = require('../lib/fetch-stats')
const writeStats = require('../lib/write-stats')


const BASE_URL = process.env.SERVER || 'http://reading-web-research.wmflabs.org'
const endpoints = {
  // 'loot-lead': (title) => `wiki/${title}`,
  'loot': (title) => `api/benchmarks/loot/${title}`,
  'loot-extraneous-nodata-mw': (title) => `api/benchmarks/loot/${title}?transforms=nodatamw`,
  'loot-extraneous-noextraneous-markup': (title) => `api/benchmarks/loot/${title}?transforms=noextra`,
  'loot-others-noreferences': (title) => `api/benchmarks/loot/${title}?transforms=nodatamw|noextra|noreferences`,
  'loot-others-nonavbox': (title) => `api/benchmarks/loot/${title}?transforms=nodatamw|noextra|nonavbox`,
  'loot-others-noambox': (title) => `api/benchmarks/loot/${title}?transforms=nodatamw|noextra|noambox`,
  'mobileview': (title) => `api/benchmarks/mobileview/${title}`,
  'wikipedia': (title) => `api/benchmarks/wikipedia/${title}`,
  'restbase': (title) => `api/benchmarks/restbase/${title}`
}

function init () {
  if (argv.c && argv.d) {
    Promise.all([getConfig(argv.c), getDirectory(argv.d)])
      .then((res) => {
        const config = res[0]
        const dir = res[1]
        console.log('Fetching pages:')
        console.log(`  ${config.pages.join(', ')}\n`)
        return fetchPages(config, dir)
          .then((pages) => {
            return Promise.all([
              processPages(pages, 'path', 'stats.json'),
              processPages(pages, 'gzip', 'stats-gzip.json')
            ])
          })
        function processPages (pages, prop, filename) {
          return fetchStats([].concat.apply([], pages), prop)
            .then((stats) => writeStats(stats, dir, filename))
        }
      })
      .catch((err) => { console.log(`[Error] ${err.message}`); process.exit(1) })
  } else if (argv.h || argv.v || argv._.length === 0) {
    help()
    process.exit(0)
  } else {
    console.error('[Error] Unrecognized parameters')
    help()
    process.exit(1)
  }
}

function help () {
  console.log(`
  loot-content-analysis [-c ./config.yml] -d [output/]

    Fetches a list of pages in the config file from loot endpoints, saves them
    in the output directory with stats.

    -c Configuration file
    -d Output folder. Fetched assets will be stored there with a stats.json
    [-h|-v] Usage & help

    Example config.yml:

${sampleConfig}
`)
}

// String -> Promise(Object)
function getConfig (path) {
  return new Promise((resolve, reject) => {
    fs.readFile(path, 'utf8', (err, contents) =>
      err ? reject(err) : resolve(contents))
  })
  .then((contents) => yaml.safeLoad(contents))
  .then((config) => validateConfig(config))
  .then((config) => addExtraInfo(config))
}

// String -> Promise(String)
function getDirectory (dirPath) {
  return new Promise((resolve, reject) => {
    fs.stat(dirPath, (err, stats) =>
      err ? reject(err) : resolve(stats))
  }).then((stats) =>
    stats.isDirectory() ? path.resolve(dirPath)
      : new Error('Output folder is not a folder'))
}

function validateConfig (config) {
  if (!config) throw new Error('Configuration can\'t be empty')
  if (!config.pages) {
    throw new Error(
`No 'pages' found in the configuration. Example configuration:
${sampleConfig}`
    )
  }
  return config
}

function addExtraInfo (config) {
  return Object.assign({}, config, {
    server: BASE_URL,
    endpoints: endpoints
  })
}

const sampleConfig = `
      pages:
        - Cat
        - Dog
        - Wikipedia
`

init(argv)
